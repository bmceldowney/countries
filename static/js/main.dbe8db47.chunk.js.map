{"version":3,"sources":["data/data.worker.js","components/Header/Header.js","state/AppStateContext.js","components/ModeSelector/ModeSelector.js","state/AppDataContext.js","components/GroupSelector/GroupSelector.js","components/CountryItem/CountryItem.js","state/ScrollContext.js","components/CountryList/VirtualizedCountryList.js","utils/debounce.js","components/App/App.js","serviceWorker.js","data/dataFetch.js","hoc/withContext.js","data/dataProcessor.js","index.js","hoc/withData.js"],"names":["module","exports","Worker","__webpack_public_path__","Header","mode","className","AppStateDispatch","React","createContext","possibleModes","name","dataKey","defaultAppState","currentModeIndex","currentGroupItemIndex","appReducer","state","action","type","payload","ModeSelector","appState","props","useState","anchorEl","setAnchorEl","appDispatch","useContext","selectedModeIndex","clickHandler","event","index","parseInt","currentTarget","dataset","handleClose","modeComponents","map","selectedClass","key","data-index","onClick","open","Boolean","id","undefined","Popover","onClose","classes","paper","anchorOrigin","vertical","horizontal","transformOrigin","Icon","AppDataContext","defaultState","all","ids","mapArray","breakData","onlyIsland","mostBorders","sharedLanguage","byIds","AppDataProvider","Provider","GroupSelector","scrollState","modeData","groupName","topItemIndex","groupButtons","Object","entries","value","CountryItem","languageComponent","flag","borders","expandedBorderNames","languageData","style","borderCountries","displayName","country","length","language","substring","indexOf","flagStyle","backgroundImage","ScrollDispatch","defaultScrollState","scrollReducer","cache","CellMeasurerCache","defaultHeight","fixedWidth","VirtualizedCountryList","lastTopIndex","setLastTopIndex","appData","scrollDispatch","items","listComponentReference","useRef","useEffect","debouncedResizeHandler","fn","cooldown","timer","context","this","args","arguments","done","apply","clearTimeout","setTimeout","debounce","clearAll","current","recomputeRowHeights","window","addEventListener","removeEventListener","scrollToRow","scrollHandler","startIndex","virtualizedWindow","width","height","ref","onRowsRendered","rowCount","deferredMeasurementCache","rowHeight","rowRenderer","scrollToAlignment","parent","heightCalc","paddingRem","columnIndex","rowIndex","loadingComponent","CircularProgress","App","useReducer","location","hostname","match","a","async","response","fetch","json","error","withContext","WrappedComponent","ContextProvider","initialState","processData","data","Promise","resolve","worker","DataWorker","onmessage","postMessage","InitializedApp","setState","dataFetch","console","log","newState","getData","ContextComponent","withData","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dbe8db47.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"4d6568b3d4f66a082c38.worker.js\");\n};","import React from 'react'\nimport './Header.css'\n\nconst Header = ({ mode }) => {\n  return (\n    <header>\n      <div className='title'>countries of the world</div>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nexport const AppStateDispatch = React.createContext(null)\n\n// action types\nexport const UPDATE_CURRENT_MODE = 'UPDATE_CURRENT_MODE'\nexport const UPDATE_GROUP_ITEM_INDEX = 'UPDATE_GROUP_ITEM_INDEX'\n\nexport const possibleModes = [\n  { name: 'all', dataKey: 'all' },\n  {\n    name: 'only islands',\n    dataKey: 'onlyIsland'\n  },\n  {\n    name: 'border count',\n    dataKey: 'mostBorders'\n  },\n  {\n    name: 'shared language',\n    dataKey: 'sharedLanguage'\n  }\n]\n\nexport const defaultAppState = {\n  currentModeIndex: 0,\n  currentGroupItemIndex: 0\n}\n\nexport const appReducer = (state, action) => {\n  switch (action.type) {\n    case UPDATE_CURRENT_MODE:\n      return { ...state, currentModeIndex: action.payload }\n    case UPDATE_GROUP_ITEM_INDEX:\n      return { ...state, currentGroupItemIndex: action.payload }\n    default:\n      return state\n  }\n}\n","import React, { useContext, useState } from 'react'\nimport Icon from '@material-ui/core/Icon'\nimport {\n  AppStateDispatch,\n  possibleModes,\n  UPDATE_CURRENT_MODE\n} from '../../state/AppStateContext'\nimport Popover from '@material-ui/core/Popover'\nimport './ModeSelector.css'\n\nconst ModeSelector = ({ props: { appState } }) => {\n  const [anchorEl, setAnchorEl] = useState(null)\n  const appDispatch = useContext(AppStateDispatch)\n  const selectedModeIndex = appState.currentModeIndex\n\n  const clickHandler = event => {\n    const index = parseInt(event.currentTarget.dataset.index, 10)\n    appDispatch({ type: UPDATE_CURRENT_MODE, payload: index })\n    handleClose()\n  }\n\n  const modeComponents = possibleModes.map((mode, index) => {\n    const selectedClass = selectedModeIndex === index ? 'mode-selected' : ''\n    return (\n      <div\n        key={index}\n        data-index={index}\n        className={`mode-item ${selectedClass}`}\n        onClick={clickHandler}\n      >\n        {mode.name}\n      </div>\n    )\n  })\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const handleClose = () => {\n    setAnchorEl(null)\n  }\n\n  const open = Boolean(anchorEl)\n  const id = open ? 'simple-popover' : undefined\n\n  return (\n    <div className='mode-container'>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        classes={{\n          paper: 'mode-popover-paper'\n        }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center'\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center'\n        }}\n      >\n        <div className='popover-content'>\n          <div className='modes'>{modeComponents}</div>\n        </div>\n      </Popover>\n      <div className='selected-mode' onClick={handleClick}>\n        <div>{possibleModes[selectedModeIndex].name}</div>\n        <Icon>keyboard_arrow_right</Icon>\n      </div>\n      <div className='modes-container'>\n        <div className='modes'>{modeComponents}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default ModeSelector\n","import React from 'react'\n\nconst AppDataContext = React.createContext({})\n\nexport const defaultState = {\n  all: { ids: [], mapArray: [], breakData: {} },\n  onlyIsland: { ids: [], mapArray: [], breakData: {} },\n  mostBorders: { ids: [], mapArray: [], breakData: {} },\n  sharedLanguage: { ids: [], mapArray: [], breakData: {} },\n  byIds: {}\n}\n\nexport const AppDataProvider = AppDataContext.Provider\nexport default AppDataContext\n","import React, { useContext, useState } from 'react'\nimport AppDataContext from '../../state/AppDataContext'\nimport Icon from '@material-ui/core/Icon'\nimport {\n  AppStateDispatch,\n  possibleModes,\n  UPDATE_GROUP_ITEM_INDEX\n} from '../../state/AppStateContext'\nimport Popover from '@material-ui/core/Popover'\n\nimport './GroupSelector.css'\n\nconst GroupSelector = ({ props: { scrollState, appState } }) => {\n  const [anchorEl, setAnchorEl] = useState(null)\n  const appDispatch = useContext(AppStateDispatch)\n  const appData = useContext(AppDataContext)\n  const modeKey = possibleModes[appState.currentModeIndex].dataKey\n  const modeData = appData[modeKey]\n  const groupName = modeData.mapArray[scrollState.topItemIndex]\n\n  const clickHandler = event => {\n    const index = parseInt(event.currentTarget.dataset.index, 10)\n    appDispatch({ type: UPDATE_GROUP_ITEM_INDEX, payload: index })\n    handleClose()\n  }\n\n  const groupButtons = Object.entries(modeData.breakData).map(\n    ([key, value], index) => {\n      const selectedClass = groupName === value ? 'group-button-selected' : ''\n      return (\n        <div\n          className={`group-button ${selectedClass}`}\n          key={index}\n          data-index={key}\n          onClick={clickHandler}\n        >\n          {value}\n        </div>\n      )\n    }\n  )\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const handleClose = () => {\n    setAnchorEl(null)\n  }\n\n  const open = Boolean(anchorEl)\n  const id = open ? 'simple-popover' : undefined\n\n  return (\n    <div className='group-selector-container'>\n      <div className='group-selector' onClick={handleClick}>\n        <div>{groupName}</div>\n        <Icon>keyboard_arrow_right</Icon>\n      </div>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        classes={{\n          paper: 'group-popover-paper'\n        }}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left'\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'left'\n        }}\n      >\n        {groupButtons}\n      </Popover>\n    </div>\n  )\n}\n\nexport default GroupSelector\n","import React from 'react'\nimport './CountryItem.css'\n\nconst CountryItem = ({\n  props: { name, flag, borders, expandedBorderNames },\n  languageData,\n  currentModeIndex,\n  style\n}) => {\n  let borderCountries = []\n  let languageComponent\n  let displayName = name\n\n  // currentModeIndex 2 === 'most borders'\n  if (currentModeIndex === 2) {\n    borderCountries = expandedBorderNames.map((country, index) => (\n      <div key={`${name}${index}`} className='border-country'>\n        {country}\n      </div>\n    ))\n    displayName = `${name} - ${borders.length}`\n  }\n\n  // currentModeIndex 3 === 'shared language'\n  if (currentModeIndex === 3) {\n    const language = languageData.substring(0, languageData.indexOf(' - '))\n    languageComponent = <div className='country-language'>{language}</div>\n  }\n\n  const flagStyle = {\n    backgroundImage: `url(${flag})`\n  }\n\n  return (\n    <div style={style} className='country-item'>\n      <div className='country-item-title'>\n        {languageComponent}\n        <div className='country-flag' style={flagStyle}></div>\n        <div className='country-item-name'>{displayName}</div>\n      </div>\n      {borderCountries}\n    </div>\n  )\n}\n\nexport default CountryItem\n","import React from 'react'\n\nexport const ScrollDispatch = React.createContext(null)\n\n// action types\nexport const UPDATE_TOP_ITEM_INDEX = 'UPDATE_TOP_ITEM_INDEX'\n\nexport const defaultScrollState = {\n  topItemIndex: 0\n}\n\nexport const scrollReducer = (state, action) => {\n  switch (action.type) {\n    case UPDATE_TOP_ITEM_INDEX:\n      return { ...state, topItemIndex: action.payload }\n    default:\n      return state\n  }\n}\n","import React, { useContext, useEffect, useRef, useState } from 'react'\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport { List, CellMeasurer, CellMeasurerCache } from 'react-virtualized'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport CountryItem from '../CountryItem/CountryItem'\nimport AppDataContext from '../../state/AppDataContext'\nimport {\n  ScrollDispatch,\n  UPDATE_TOP_ITEM_INDEX\n} from '../../state/ScrollContext'\nimport { possibleModes } from '../../state/AppStateContext'\nimport debounce from '../../utils/debounce'\nimport './CountryList.css'\n\nconst cache = new CellMeasurerCache({\n  defaultHeight: 80,\n  fixedWidth: true\n})\n\nconst VirtualizedCountryList = ({ props: { appState } }) => {\n  const [lastTopIndex, setLastTopIndex] = useState(0)\n  const appData = useContext(AppDataContext)\n  const scrollDispatch = useContext(ScrollDispatch)\n  const byIds = appData.byIds\n  const dataKey = possibleModes[appState.currentModeIndex].dataKey\n  const items = appData[dataKey].ids\n  const listComponentReference = useRef(null)\n\n  // Recalculate the list elements row height after a window resize\n  useEffect(() => {\n    const handleResize = () => {\n      cache.clearAll()\n      if (!listComponentReference || !listComponentReference.current) return\n      listComponentReference.current.recomputeRowHeights()\n    }\n    const debouncedResizeHandler = debounce(handleResize, 100)\n\n    window.addEventListener('resize', debouncedResizeHandler)\n    return () => {\n      window.removeEventListener('resize', debouncedResizeHandler)\n    }\n  })\n\n  useEffect(() => {\n    cache.clearAll()\n    if (!listComponentReference || !listComponentReference.current) return\n    listComponentReference.current.recomputeRowHeights()\n  }, [dataKey])\n\n  useEffect(() => {\n    if (!listComponentReference || !listComponentReference.current) return\n    listComponentReference.current.scrollToRow(appState.currentGroupItemIndex)\n  }, [appState.currentGroupItemIndex])\n\n  useEffect(() => {\n    if (!listComponentReference || !listComponentReference.current) return\n    listComponentReference.current.scrollToRow(0)\n  }, [appState.currentModeIndex])\n\n  const scrollHandler = event => {\n    const { startIndex } = event\n    if (startIndex !== lastTopIndex) {\n      scrollDispatch({ type: UPDATE_TOP_ITEM_INDEX, payload: startIndex })\n    }\n    setLastTopIndex(startIndex)\n  }\n\n  const virtualizedWindow = (\n    <AutoSizer>\n      {({ width, height }) => (\n        <List\n          ref={listComponentReference}\n          onRowsRendered={scrollHandler}\n          width={width}\n          height={height}\n          rowCount={items.length}\n          deferredMeasurementCache={cache}\n          rowHeight={cache.rowHeight}\n          rowRenderer={rowRenderer}\n          scrollToAlignment={'start'}\n        />\n      )}\n    </AutoSizer>\n  )\n\n  const rowRenderer = ({ index, style, key, parent }) => {\n    const id = items[index]\n    // these are values from the css, inlining here as required by react-virtualized\n    const paddingRem = 2\n    const marginRem = 0.2\n    const borderPx = 2\n    const heightCalc = `${paddingRem + marginRem}rem - ${borderPx}px`\n\n    return (\n      <CellMeasurer\n        cache={cache}\n        columnIndex={0}\n        key={key}\n        parent={parent}\n        rowIndex={index}\n      >\n        <CountryItem\n          style={{\n            ...style,\n            width: `calc(${style.width} - ${paddingRem}rem - ${borderPx}px)`,\n            height: `calc(${style.height}px - ${heightCalc})`\n          }}\n          key={key}\n          props={byIds[id]}\n          languageData={appData[dataKey].mapArray[index]}\n          currentModeIndex={appState.currentModeIndex}\n        />\n      </CellMeasurer>\n    )\n  }\n\n  const loadingComponent = (\n    <div className='country-loading'>\n      <CircularProgress />\n    </div>\n  )\n\n  return (\n    <div className='country-list'>\n      {items.length ? virtualizedWindow : loadingComponent}\n    </div>\n  )\n}\n\nexport default VirtualizedCountryList\n","/**\n * Prevents a function from being called until a cooldown period has passed\n * @param {Function} fn - the function to debounce\n * @param {Integer} cooldown - the amount of time that must pass until the function can be invoked again\n */\nexport default function debounce (fn, cooldown) {\n  let timer = null\n  return function () {\n    const context = this\n    const args = arguments\n    const done = () => {\n      timer = null\n      fn.apply(context, args)\n    }\n\n    clearTimeout(timer)\n    timer = setTimeout(done, cooldown)\n  }\n}\n","import React, { useReducer } from 'react'\nimport Header from '../Header/Header'\nimport ModeSelector from '../ModeSelector/ModeSelector'\nimport GroupSelector from '../GroupSelector/GroupSelector'\nimport VirtualizedCountryList from '../CountryList/VirtualizedCountryList'\nimport {\n  ScrollDispatch,\n  defaultScrollState,\n  scrollReducer\n} from '../../state/ScrollContext'\nimport {\n  AppStateDispatch,\n  defaultAppState,\n  appReducer\n} from '../../state/AppStateContext'\nimport './App.css'\n\nconst App = () => {\n  const [scrollState, scrollDispatch] = useReducer(\n    scrollReducer,\n    defaultScrollState\n  )\n  const [appState, appDispatch] = useReducer(appReducer, defaultAppState)\n\n  return (\n    <AppStateDispatch.Provider value={appDispatch}>\n      <ScrollDispatch.Provider value={scrollDispatch}>\n        <div className='App'>\n          <Header />\n          <ModeSelector props={{ appState }} />\n          <GroupSelector props={{ scrollState, appState }} />\n          <VirtualizedCountryList props={{ appState }} />\n        </div>\n      </ScrollDispatch.Provider>\n    </AppStateDispatch.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * responsible for fetching the data\n */\nexport default async () => {\n  let response = null\n\n  response = await fetch('https://restcountries.eu/rest/v2/all')\n  const json = response.json()\n  if (json.error) throw json.error\n\n  return json\n}\n","import React from 'react'\n\nconst withContext = (WrappedComponent, ContextProvider, initialState) => {\n  return () => {\n    return (\n      <ContextProvider value={initialState}>\n        <WrappedComponent />\n      </ContextProvider>\n    )\n  }\n}\n\nexport default withContext\n","/**\n * A wrapper for the web worker functionality\n */\nimport DataWorker from './data.worker'\n\nexport const processData = data => {\n  return new Promise(resolve => {\n    const worker = new DataWorker()\n\n    worker.onmessage = event => {\n      resolve(event.data)\n    }\n\n    worker.postMessage(data)\n  })\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App/App'\nimport * as serviceWorker from './serviceWorker'\nimport withData from './hoc/withData'\n\nconst InitializedApp = withData(App)\n\nReactDOM.render(<InitializedApp />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, { useState, useEffect } from 'react'\nimport dataFetch from '../data/dataFetch'\nimport { AppDataProvider, defaultState } from '../state/AppDataContext'\nimport withContext from './withContext'\nimport { processData } from '../data/dataProcessor'\n\nconst withData = WrappedComponent => {\n  return () => {\n    const [state, setState] = useState(defaultState)\n\n    useEffect(() => {\n      const getData = async () => {\n        const json = await dataFetch()\n        console.log('data fetched')\n        const newState = await processData(json)\n        setState(newState)\n      }\n\n      getData()\n    }, [])\n\n    const ContextComponent = withContext(\n      WrappedComponent,\n      AppDataProvider,\n      state\n    )\n\n    return <ContextComponent />\n  }\n}\n\nexport default withData\n"],"sourceRoot":""}