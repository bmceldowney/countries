{"version":3,"sources":["../webpack/bootstrap","data/data.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","onmessage","event","data","allIds","byIds","onlyIslandIds","populateAllIds","mostBordersIds","populateMostBordersIds","sharedLanguages","buildSharedLanguages","allIdsGroupData","buildAlphaGroupData","onlyIslandIdsGroupData","mostBordersIdsGroupData","buildBorderGroupData","sharedLanguageIds","sharedLanguageMapArray","sharedLanguageBreakData","buildSharedLanguageData","populateExpandedBorders","postMessage","all","ids","mapArray","breakData","onlyIsland","mostBorders","sharedLanguage","slice","sort","a","b","borders","length","forEach","country","push","alpha3Code","alphaSort","getAlphaSort","values","expandedBorderNames","map","border","aName","bName","countries","languages","language","id","index","entries","countryIdArray","groupLabel","concat"],"mappings":"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","file":"4d6568b3d4f66a082c38.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/countries/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * the web worker used to process the data from the API into the data\n * structures used by the app.\n */\nonmessage = event => {\n  const data = event.data\n\n  const [allIds, byIds, onlyIslandIds] = populateAllIds(data)\n  const mostBordersIds = populateMostBordersIds(allIds, byIds)\n  const sharedLanguages = buildSharedLanguages(byIds)\n\n  const allIdsGroupData = buildAlphaGroupData(allIds, byIds)\n  const onlyIslandIdsGroupData = buildAlphaGroupData(onlyIslandIds, byIds)\n  const mostBordersIdsGroupData = buildBorderGroupData(mostBordersIds, byIds)\n  const [\n    sharedLanguageIds,\n    sharedLanguageMapArray,\n    sharedLanguageBreakData\n  ] = buildSharedLanguageData(sharedLanguages)\n\n  populateExpandedBorders(byIds)\n\n  postMessage({\n    all: {\n      ids: allIds,\n      mapArray: allIdsGroupData.mapArray,\n      breakData: allIdsGroupData.breakData\n    },\n    onlyIsland: {\n      ids: onlyIslandIds,\n      mapArray: onlyIslandIdsGroupData.mapArray,\n      breakData: onlyIslandIdsGroupData.breakData\n    },\n    mostBorders: {\n      ids: mostBordersIds,\n      mapArray: mostBordersIdsGroupData.mapArray,\n      breakData: mostBordersIdsGroupData.breakData\n    },\n    sharedLanguage: {\n      ids: sharedLanguageIds,\n      mapArray: sharedLanguageMapArray,\n      breakData: sharedLanguageBreakData\n    },\n    byIds\n  })\n}\n\n/**\n * Gets an array of all country ids, sorted by the number of bordering countries\n * they have\n * @param {Array<string>} allIds an array with all of the ids in the dataset\n * @param {Object} byIds an object containing all of the data objects from the API, keyed by id\n * @returns {Array<string>} an array of all country ids, sorted by the number of bordering countries\n */\nconst populateMostBordersIds = (allIds, byIds) => {\n  return allIds.slice().sort((a, b) => {\n    return byIds[b].borders.length - byIds[a].borders.length\n  })\n}\n\nconst populateAllIds = data => {\n  let onlyIslandIds = []\n  let allIds = []\n  let byIds = []\n\n  data.forEach(country => {\n    if (!country.borders.length) {\n      onlyIslandIds.push(country.alpha3Code)\n    }\n\n    allIds.push(country.alpha3Code)\n\n    byIds[country.alpha3Code] = country\n  })\n\n  const alphaSort = getAlphaSort(byIds)\n  return [allIds.sort(alphaSort), byIds, onlyIslandIds.sort(alphaSort)]\n}\n\nconst populateExpandedBorders = byIds => {\n  Object.values(byIds).forEach(country => {\n    country.expandedBorderNames = country.borders.map(border => {\n      return byIds[border].name\n    })\n  })\n}\n\nconst getAlphaSort = byIds => {\n  return (a, b) => {\n    const aName = byIds[a].name\n    const bName = byIds[b].name\n\n    if (aName > bName) return 1\n    if (aName < bName) return -1\n    return 0\n  }\n}\n\nconst buildSharedLanguages = countries => {\n  // what I need to do here is create a list of ids that is grouped by\n  // languages. so i need an array of objects that have a language name that\n  // i can use to sort and an array of country ids that are the countries that\n  // speak that language\n\n  const languages = {}\n  Object.values(countries).forEach(country => {\n    country.languages.forEach(language => {\n      if (languages[language.name]) {\n        languages[language.name].push(country.alpha3Code)\n      } else {\n        languages[language.name] = [country.alpha3Code]\n      }\n    })\n  })\n\n  return languages\n}\n\n/**\n * a group data object has two properties:\n *  1. an array containing a 1:1 map of group names to item elements\n *  2. an object with keys that correspond to the first index of the group and\n *   a value of the group name\n *\n */\nconst buildAlphaGroupData = (ids, byIds) => {\n  const mapArray = []\n  const breakData = {}\n  ids.forEach((id, index) => {\n    const name = byIds[id].name\n    mapArray[index] = name[0]\n    if (index === 0 || mapArray[index] !== mapArray[index - 1]) {\n      breakData[index] = mapArray[index]\n    }\n  })\n\n  return { mapArray, breakData }\n}\n\nconst buildBorderGroupData = (ids, byIds) => {\n  const mapArray = []\n  const breakData = {}\n  ids.forEach((id, index) => {\n    const borders = byIds[id].borders\n    mapArray[index] = borders.length\n    if (index === 0 || mapArray[index] !== mapArray[index - 1]) {\n      breakData[index] = mapArray[index]\n    }\n  })\n\n  return { mapArray, breakData }\n}\n\nconst buildSharedLanguageData = languages => {\n  let ids = []\n  const mapArray = []\n  const breakData = {}\n\n  const alphaSort = (a, b) => {\n    if (a > b) return 1\n    if (b > a) return -1\n    return 0\n  }\n\n  Object.entries(languages)\n    .sort(alphaSort)\n    .forEach(([key, value]) => {\n      const languageName = key\n      const countryIdArray = value\n      const groupLabel = `${languageName} - ${countryIdArray.length}`\n\n      ids = ids.concat(countryIdArray)\n      countryIdArray.forEach(() => {\n        mapArray.push(groupLabel)\n      })\n      breakData[mapArray.length - countryIdArray.length] = groupLabel\n    })\n\n  return [ids, mapArray, breakData]\n}\n"],"sourceRoot":""}